# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ main ]
    tags:
      - "v*.*.*"
  pull_request:
    branches: [ main ]

jobs:
  duplicate_check:
    continue-on-error: true
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@master
  tests:
    name: Unit tests
    runs-on: ubuntu-latest
    needs: duplicate_check
    if: ${{ needs.duplicate_check.outputs.should_skip != 'true' }}
    steps:
      - name: Checkout source
        uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: 17
          distribution: 'temurin'
          cache: 'gradle'
      - name: Run tests
        run: xvfb-run --auto-servernum ./gradlew check --info
        env:
          CI: "true"
  docker_image:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: tests
    if: |
      (github.ref == 'refs/heads/main' || contains(github.ref, 'refs/tags'))
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set variables
        id: vars
        run: |
          DOCKER_IMAGE=planqk/planqk-library
          VERSION=m1test
          SHORTREF=${GITHUB_SHA::8}

          # If this is git tag, use the tag name
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          TAGS="${DOCKER_IMAGE}:${VERSION},${DOCKER_IMAGE}:${SHORTREF}"

          # Set output parameters.
          echo ::set-output name=tags::${TAGS}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Build and push latest Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile.noBuild
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.vars.outputs.tags }}
